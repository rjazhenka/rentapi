// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: api/rent.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RentServiceClient is the client API for RentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RentServiceClient interface {
	CreateRent(ctx context.Context, in *CreateRentRequest, opts ...grpc.CallOption) (*CreateRentResponse, error)
}

type rentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRentServiceClient(cc grpc.ClientConnInterface) RentServiceClient {
	return &rentServiceClient{cc}
}

func (c *rentServiceClient) CreateRent(ctx context.Context, in *CreateRentRequest, opts ...grpc.CallOption) (*CreateRentResponse, error) {
	out := new(CreateRentResponse)
	err := c.cc.Invoke(ctx, "/realty.rent.api.v1.RentService/CreateRent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RentServiceServer is the server API for RentService service.
// All implementations must embed UnimplementedRentServiceServer
// for forward compatibility
type RentServiceServer interface {
	CreateRent(context.Context, *CreateRentRequest) (*CreateRentResponse, error)
	mustEmbedUnimplementedRentServiceServer()
}

// UnimplementedRentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRentServiceServer struct {
}

func (UnimplementedRentServiceServer) CreateRent(context.Context, *CreateRentRequest) (*CreateRentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRent not implemented")
}
func (UnimplementedRentServiceServer) mustEmbedUnimplementedRentServiceServer() {}

// UnsafeRentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RentServiceServer will
// result in compilation errors.
type UnsafeRentServiceServer interface {
	mustEmbedUnimplementedRentServiceServer()
}

func RegisterRentServiceServer(s grpc.ServiceRegistrar, srv RentServiceServer) {
	s.RegisterService(&RentService_ServiceDesc, srv)
}

func _RentService_CreateRent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RentServiceServer).CreateRent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/realty.rent.api.v1.RentService/CreateRent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RentServiceServer).CreateRent(ctx, req.(*CreateRentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RentService_ServiceDesc is the grpc.ServiceDesc for RentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "realty.rent.api.v1.RentService",
	HandlerType: (*RentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRent",
			Handler:    _RentService_CreateRent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/rent.proto",
}
